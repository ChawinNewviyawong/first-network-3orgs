# 1
run exist network

# 2 prepare environment

create folder org4-artifacts

create file org4-crypto.yaml
--------------------------------------------------
PeerOrgs:
  - Name: Org4
    Domain: org4.example.com
    EnableNodeOUs: true
    Template:                                     # จำนวนของ peer
      Count: 1
    Users:
      Count: 1
--------------------------------------------------

create file configtx.yaml
--------------------------------------------------
Organizations:
    - &Org4
        Name: Org4MSP
        ID: Org4MSP
        MSPDir: crypto-config/peerOrganizations/org4.example.com/msp
        AnchorPeers:
            - Host: peer0.org4.example.com
              Port: 7051
--------------------------------------------------

create file docker-compose-orgs4.yaml
--------------------------------------------------
networks:
  basic:

services:
  ca4.example.com:
    image: hyperledger/fabric-ca
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca4.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org4.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/446798c80a7867a4ceb3dc8fcc1365cf9b433b2a240e93ebb039ffe4c8ca52e0_sk
    ports:
      - "10054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw'
    volumes:
      - ./crypto-config/peerOrganizations/org4.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca4.example.com
    networks:
      - basic

  peer0.org4.example.com:
    container_name: peer0.org4.example.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org4.example.com
      - CORE_LOGGING_PEER=info
      - CORE_CHAINCODE_LOGGING_LEVEL=info
      - CORE_PEER_LOCALMSPID=Org4MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.org4.example.com:7051
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 10051:7051
      - 10053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/org1.example.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    networks:
      - basic

  Org4cli:
    container_name: Org4cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=info
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org4.example.com:7051
      - CORE_PEER_LOCALMSPID=Org4MSP
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
      - CORE_CHAINCODE_KEEPALIVE=10
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./../chaincode/:/opt/gopath/src/github.com/
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
    networks:
        - basic
--------------------------------------------------

# 3 generate org 4 crypto

open terminal, goto subdiractory [org4-artifacts]
 >> cd org4-artifacts

generate crypto
 >> ../../bin/cryptogen generate --config=./org4-crypto.yaml
 >> export FABRIC_CFG_PATH=$PWD

generate channel
 >> ../../bin/configtxgen -printOrg Org4MSP > ../config/org4.json
 >> cp -r crypto-config/ordererOrganizations org4-artifacts/crypto-config/

# 4 prepare the CLI environment

exec into the CLI container
 >> docker exec -it cli bash

set chaincode path
 >> CC_SRC_PATH="github.com/chaincode/chaincode_example02/go/"

installing jq
 >> apt-get -y update 
 >> apt-get -y install jq

set orderer global
 >> CORE_PEER_LOCALMSPID="OrdererMSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp

export the orderer ca and channel name variables
 >> export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
 >> export CHANNEL_NAME=mychannel

fetch the configuration
 >> peer channel fetch config config_block.pb -o orderer.example.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

convert the configuration to json and trim it down
 >> configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config > config.json

modify the configuration to append the new org
 >> jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"Org4MSP":.[1]}}}}}' config.json ./config/org4.json > modified_config.json

 >> configtxlator proto_encode --input config.json --type common.Config > config.pb
 >> configtxlator proto_encode --input modified_config.json --type common.Config > modified_config.pb
 >> configtxlator compute_update --channel_id $CHANNEL_NAME --original config.pb --updated modified_config.pb --output org4_update.pb
 >> configtxlator proto_decode --input org4_update.pb --type common.ConfigUpdate | jq . > org4_update.json
 >> echo '{"payload":{"header":{"channel_header":{"channel_id":"mychannel", "type":2}},"data":{"config_update":'$(cat org4_update.json)'}}}' | jq . > org4_update_in_envelope.json
 >> configtxlator proto_encode --input org4_update_in_envelope.json --type common.Envelope --output org4_update_in_envelope.pb

signing config transaction
 >> CORE_PEER_LOCALMSPID="Org1MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
 >> CORE_PEER_ADDRESS=peer0.org1.example.com:7051

 >> peer channel signconfigtx -f org4_update_in_envelope.pb

submit the config update
 >> CORE_PEER_LOCALMSPID="Org2MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
 >> CORE_PEER_ADDRESS=peer0.org2.example.com:7051
 >> peer channel update -f org4_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.example.com:7050 --tls --cafile $ORDERER_CA

# 5 inspect the logs
 >> docker logs -f peer0.org1.example.com

# 6 have Org4 peers join network
 >> docker exec -it Org4cli bash
 >> CC_SRC_PATH="github.com/chaincode/chaincode_example02/go/"
 >> export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
 >> export CHANNEL_NAME=mychannel

fetching channel config block from orderer
 >> peer channel fetch 0 mychannel.block -o orderer.example.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

 >> CORE_PEER_LOCALMSPID="Org4MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp
 >> CORE_PEER_ADDRESS=peer0.org4.example.com:7051
 >> peer channel join -b mychannel.block

 >> CORE_PEER_LOCALMSPID="Org4MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/peers/peer1.org4.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp
 >> CORE_PEER_ADDRESS=peer1.org4.example.com:7051
 >> peer channel join -b mychannel.block

# 7 install chaincode in org4
 >> CORE_PEER_LOCALMSPID="Org4MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp
 >> CORE_PEER_ADDRESS=peer0.org4.example.com:7051
 >> peer chaincode install -n mycc -v ${VERSION} -l ${LANGUAGE} -p ${CC_SRC_PATH}

 >> CORE_PEER_LOCALMSPID="Org4MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/peers/peer1.org4.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp
 >> CORE_PEER_ADDRESS=peer1.org4.example.com:7051
 >> peer chaincode install -n mycc -v ${VERSION} -l ${LANGUAGE} -p ${CC_SRC_PATH}

# 8 upgrade chaincode all peer all org
 >> CORE_PEER_LOCALMSPID
 >> CORE_PEER_TLS_ROOTCERT_FILE
 >> CORE_PEER_MSPCONFIGPATH
 >> CORE_PEER_ADDRESS
 >> peer chaincode install -n mycc -v ${VERSION} -l ${LANGUAGE} -p ${CC_SRC_PATH}

 >> CORE_PEER_LOCALMSPID="Org1MSP"
 >> CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
 >> CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
 >> CORE_PEER_ADDRESS=peer0.org1.example.com:7051
 >> peer chaincode upgrade -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 2.0 -c '{"Args":[]}' -P "AND ('Org1MSP.peer','Org2MSP.peer','Org3MSP.peer','Org4MSP.peer')"

